#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Modular inverse
int modInverse(int a, int m) {
    for (int i = 1; i < m; i++)
        if ((a * i) % m == 1) return i;
    return -1;
}

// Decrypt character using affine cipher
char decryptChar(char ch, int a_inv, int b) {
    if (isupper(ch))
        return ((a_inv * ((ch - 'A' - b + 26)) % 26) + 'A');
    else if (islower(ch))
        return ((a_inv * ((ch - 'a' - b + 26)) % 26) + 'a');
    else
        return ch;
}

int main() {
    char ciphertext[1000], plaintext[1000];
    int a = 3, b = 15;
    int a_inv = modInverse(a, 26);

    if (a_inv == -1) {
        printf("Modular inverse doesn't exist for a = %d\n", a);
        return 1;
    }

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = 0;

    for (int i = 0; i < strlen(ciphertext); i++) {
        plaintext[i] = decryptChar(ciphertext[i], a_inv, b);
    }
    plaintext[strlen(ciphertext)] = '\0';

    printf("Decrypted Text: %s\n", plaintext);
    return 0;
}
