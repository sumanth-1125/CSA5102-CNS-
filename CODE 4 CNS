#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Helper: Convert char to 0–25
int charToIndex(char ch) {
    return toupper(ch) - 'A';
}

// Helper: Convert 0–25 to uppercase char
char indexToChar(int idx) {
    return 'A' + (idx % 26);
}

// Generate repeated key to match plaintext length
void generateFullKey(char *key, char *fullKey, int textLen) {
    int keyLen = strlen(key);
    for (int i = 0, j = 0; i < textLen; i++) {
        if (isalpha(key[j])) {
            fullKey[i] = toupper(key[j % keyLen]);
            j++;
        } else {
            i--; // skip non-alphabet characters in key
            j++;
        }
    }
    fullKey[textLen] = '\0';
}

// Encryption
void encrypt(char *plaintext, char *key, char *ciphertext) {
    char fullKey[1000];
    int len = strlen(plaintext);
    generateFullKey(key, fullKey, len);

    for (int i = 0; i < len; i++) {
        char ch = plaintext[i];
        if (isalpha(ch)) {
            int shift = charToIndex(fullKey[i]);
            if (isupper(ch)) {
                ciphertext[i] = ((ch - 'A' + shift) % 26) + 'A';
            } else {
                ciphertext[i] = ((ch - 'a' + shift) % 26) + 'a';
            }
        } else {
            ciphertext[i] = ch; // keep spaces/punctuation unchanged
        }
    }
    ciphertext[len] = '\0';
}

// Decryption
void decrypt(char *ciphertext, char *key, char *plaintext) {
    char fullKey[1000];
    int len = strlen(ciphertext);
    generateFullKey(key, fullKey, len);

    for (int i = 0; i < len; i++) {
        char ch = ciphertext[i];
        if (isalpha(ch)) {
            int shift = charToIndex(fullKey[i]);
            if (isupper(ch)) {
                plaintext[i] = ((ch - 'A' - shift + 26) % 26) + 'A';
            } else {
                plaintext[i] = ((ch - 'a' - shift + 26) % 26) + 'a';
            }
        } else {
            plaintext[i] = ch;
        }
    }
    plaintext[len] = '\0';
}

int main() {
    char plaintext[1000], key[100], ciphertext[1000], decrypted[1000];
