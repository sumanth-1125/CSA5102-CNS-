#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 26

// Create cipher alphabet from keyword
void generateCipherAlphabet(char keyword[], char cipherMap[]) {
    int used[SIZE] = {0};
    int idx = 0;

    // Add keyword letters first
    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (ch == 'J') ch = 'I'; // Optional: Treat I/J same
        if (isalpha(ch) && !used[ch - 'A']) {
            cipherMap[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    // Fill remaining unused letters
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipherMap[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }
}

// Encrypt a message using monoalphabetic substitution
void encrypt(char *plaintext, char *cipherMap, char *ciphertext) {
    for (int i = 0; plaintext[i]; i++) {
        char ch = plaintext[i];
        if (isupper(ch)) {
            ciphertext[i] = cipherMap[ch - 'A'];
        } else if (islower(ch)) {
            ciphertext[i] = tolower(cipherMap[ch - 'a']);
        } else {
            ciphertext[i] = ch;
        }
    }
    ciphertext[strlen(plaintext)] = '\0';
}

// Decrypt a message using reverse cipher mapping
void decrypt(char *ciphertext, char *cipherMap, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        char ch = ciphertext[i];
        if (isalpha(ch)) {
            char upper = toupper(ch);
            for (int j = 0; j < SIZE; j++) {
                if (cipherMap[j] == upper) {
                    plaintext[i] = isupper(ch) ? ('A' + j) : tolower('A' + j);
                    break;
                }
            }
        } else {
            plaintext[i] = ch;
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    char keyword[100], plaintext[1000], ciphertext[1000], decrypted[1000];
    char cipherMap[SIZE];

    printf("Enter the keyword: ");
    fgets(keyword, sizeof(keyword), stdin);
    keyword[strcspn(keyword, "\n")] = 0;

    generateCipherAlphabet(keyword, cipherMap);

    printf("Cipher Mapping:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%c â†’ %c\n", 'A' + i, cipherMap[i]);
    }

    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0;

    encrypt(plaintext, cipherMap, ciphertext);
    printf("Encrypted text: %s\n", ciphertext);

    decrypt(ciphertext, cipherMap, decrypted);
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
