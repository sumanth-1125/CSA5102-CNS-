#include <stdio.h>
#include <string.h>
#include <ctype.h>

// GCD function
int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}

// Modular inverse (for decryption)
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) return x;
    }
    return -1; // No inverse exists
}

// Encrypt character
char encryptChar(char ch, int a, int b) {
    if (isupper(ch))
        return ((a * (ch - 'A') + b) % 26) + 'A';
    else if (islower(ch))
        return ((a * (ch - 'a') + b) % 26) + 'a';
    else
        return ch;
}

// Decrypt character
char decryptChar(char ch, int a_inv, int b) {
    if (isupper(ch))
        return ((a_inv * ((ch - 'A' - b + 26)) % 26) + 'A');
    else if (islower(ch))
        return ((a_inv * ((ch - 'a' - b + 26)) % 26) + 'a');
    else
        return ch;
}

int main() {
    char plaintext[1000], ciphertext[1000], decrypted[1000];
    int a, b;

    printf("Enter value of 'a' (must be coprime with 26): ");
    scanf("%d", &a);
    printf("Enter value of 'b' (0 to 25): ");
    scanf("%d", &b);

    if (gcd(a, 26) != 1) {
        printf("Invalid value of 'a'. It must be coprime with 26.\n");
        return 1;
    }

    getchar(); // Clear newline from buffer
    printf("Enter plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0;

    // Encryption
    for (int i = 0; i < strlen(plaintext); i++) {
        ciphertext[i] = encryptChar(plaintext[i], a, b);
    }
    ciphertext[strlen(plaintext)] = '\0';
    printf("Encrypted text: %s\n", ciphertext);

    // Decryption
    int a_inv = modInverse(a, 26);
    if (a_inv == -1) {
        printf("No modular inverse for a = %d. Cannot decrypt.\n", a);
        return 1;
    }

    for (int i = 0; i < strlen(ciphertext); i++) {
        decrypted[i] = decryptChar(ciphertext[i], a_inv, b);
    }
    decrypted[strlen(ciphertext)] = '\0';
    printf("Decrypted text: %s\n", decrypted);

    return 0;
}
