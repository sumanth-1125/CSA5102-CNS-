#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MOD 26

// Key matrix
int key[2][2] = {{9, 4}, {5, 7}};
int inverse_key[2][2]; // To be calculated

// Find modular inverse of determinant
int mod_inverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) return x;
    }
    return -1;
}

// Compute inverse of 2x2 matrix mod 26
void compute_inverse_key() {
    int det = key[0][0]*key[1][1] - key[0][1]*key[1][0];
    det = (det % MOD + MOD) % MOD;
    int inv_det = mod_inverse(det, MOD);

    if (inv_det == -1) {
        printf("Key matrix not invertible!\n");
        return;
    }

    inverse_key[0][0] =  (key[1][1] * inv_det) % MOD;
    inverse_key[0][1] = (-key[0][1] * inv_det + MOD) % MOD;
    inverse_key[1][0] = (-key[1][0] * inv_det + MOD) % MOD;
    inverse_key[1][1] =  (key[0][0] * inv_det) % MOD;
}

void hill_cipher_encrypt(char *plaintext, char *ciphertext) {
    int len = strlen(plaintext);
    int i = 0;

    while (i < len) {
        int a = plaintext[i] - 'A';
        int b = plaintext[i+1] - 'A';

        int c1 = (key[0][0]*a + key[0][1]*b) % MOD;
        int c2 = (key[1][0]*a + key[1][1]*b) % MOD;

        ciphertext[i] = c1 + 'A';
        ciphertext[i+1] = c2 + 'A';

        i += 2;
    }
    ciphertext[len] = '\0';
}

void hill_cipher_decrypt(char *ciphertext, char *decrypted) {
    int len = strlen(ciphertext);
    int i = 0;

    while (i < len) {
        int a = ciphertext[i] - 'A';
        int b = ciphertext[i+1] - 'A';

        int d1 = (inverse_key[0][0]*a + inverse_key[0][1]*b) % MOD;
        int d2 = (inverse_key[1][0]*a + inverse_key[1][1]*b) % MOD;

        decrypted[i] = d1 + 'A';
        decrypted[i+1] = d2 + 'A';

        i += 2;
    }
    decrypted[len] = '\0';
}

void clean_text(char *text) {
    int i, j = 0;
    for (i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            text[j++] = toupper(text[i]);
        }
    }
    if (j % 2 == 1) {
        text[j++] = 'X';  // Padding
    }
    text[j] = '\0';
}

int main() {
    char plaintext[1000] = "meet me at the usual place at ten rather than eight oclock";
    char ciphertext[1000], decrypted[1000];

    clean_text(plaintext);
    compute_inverse_key();

    hill_cipher_encrypt(plaintext, ciphertext);
    printf("Encrypted Ciphertext: %s\n", ciphertext);

    hill_cipher_decrypt(ciphertext, decrypted);
    printf("Decrypted Plaintext : %s\n", decrypted);

    return 0;
}
