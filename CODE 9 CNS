#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

char matrix[SIZE][SIZE];

// Removes duplicates from keyword
void generateKeyMatrix(char *key) {
    int used[26] = {0};
    used['J' - 'A'] = 1; // I and J are the same
    int idx = 0;
    char temp[26];

    // Add keyword
    for (int i = 0; key[i]; i++) {
        char ch = toupper(key[i]);
        if (ch == 'J') ch = 'I';
        if (isalpha(ch) && !used[ch - 'A']) {
            temp[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    // Add remaining letters
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            temp[idx++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    // Fill 5x5 matrix
    idx = 0;
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            matrix[i][j] = temp[idx++];
}

// Find row and column of character
void findPosition(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}

// Decrypt pair of letters
void decryptPair(char a, char b, char *out1, char *out2) {
    int r1, c1, r2, c2;
    findPosition(a, &r1, &c1);
    findPosition(b, &r2, &c2);

    if (r1 == r2) { // Same row
        *out1 = matrix[r1][(c1 + 4) % 5];
        *out2 = matrix[r2][(c2 + 4) % 5];
    } else if (c1 == c2) { // Same column
        *out1 = matrix[(r1 + 4) % 5][c1];
        *out2 = matrix[(r2 + 4) % 5][c2];
    } else { // Rectangle
        *out1 = matrix[r1][c2];
        *out2 = matrix[r2][c1];
    }
}

// Main decryption
void decryptMessage(char *ciphertext, char *plaintext) {
    int len = strlen(ciphertext);
    int pi = 0;

    for (int i = 0; i < len; i += 2) {
        char a = toupper(ciphertext[i]);
        char b = toupper(ciphertext[i + 1]);

        if (!isalpha(a) || !isalpha(b)) continue;

        char out1, out2;
        decryptPair(a, b, &out1, &out2);
        plaintext[pi++] = out1;
        plaintext[pi++] = out2;
    }
    plaintext[pi] = '\0';
}

int main() {
    char keyword[] = "MONARCHY";  // Common historical Playfair key
    char ciphertext[] =
        "KXJEYUREBEZWEHEWRYTUHEYFS"
        "KREHEGOYFIWTTTUOLKSYCAJPO"
        "BOTEIZONTXBYBNTGONEYCUZWR"
        "GDSONSXBOUYWRHEBAAHYUSEDQ";

    char plaintext[1000];

    generateKeyMatrix(keyword);
    decryptMessage(ciphertext, plaintext);

    printf("Decrypted Message:\n%s\n", plaintext);
    return 0;
}
